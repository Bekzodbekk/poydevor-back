// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package storage

import (
	"context"
	"time"
)

const addWorker = `-- name: AddWorker :exec
INSERT INTO workers
    (first_name, last_name, phone)
VALUES 
    ($1, $2, $3)
`

type AddWorkerParams struct {
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) AddWorker(ctx context.Context, arg AddWorkerParams) error {
	_, err := q.db.ExecContext(ctx, addWorker, arg.FirstName, arg.LastName, arg.Phone)
	return err
}

const endDay = `-- name: EndDay :one
INSERT INTO daily_production
    (date, count_blocks)
VALUES 
    ($1, $2)
RETURNING id
`

type EndDayParams struct {
	Date        time.Time
	CountBlocks int32
}

func (q *Queries) EndDay(ctx context.Context, arg EndDayParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, endDay, arg.Date, arg.CountBlocks)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const endDayWorkers = `-- name: EndDayWorkers :exec
INSERT INTO daily_production_workers
    (daily_production_id, worker_id)
VALUES 
    ($1, $2)
`

type EndDayWorkersParams struct {
	DailyProductionID int32
	WorkerID          int32
}

func (q *Queries) EndDayWorkers(ctx context.Context, arg EndDayWorkersParams) error {
	_, err := q.db.ExecContext(ctx, endDayWorkers, arg.DailyProductionID, arg.WorkerID)
	return err
}

const getWorkers = `-- name: GetWorkers :many
SELECT 
    id, first_name, last_name, phone, created_at, updated_at, deleted_at
FROM
    workers
WHERE
    deleted_at = 0
`

func (q *Queries) GetWorkers(ctx context.Context) ([]Worker, error) {
	rows, err := q.db.QueryContext(ctx, getWorkers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Worker
	for rows.Next() {
		var i Worker
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadBlockWorkers = `-- name: LoadBlockWorkers :exec
INSERT INTO load_production
    (send_block_id, worker_id)
VALUES 
    ($1, $2)
`

type LoadBlockWorkersParams struct {
	SendBlockID int32
	WorkerID    int32
}

func (q *Queries) LoadBlockWorkers(ctx context.Context, arg LoadBlockWorkersParams) error {
	_, err := q.db.ExecContext(ctx, loadBlockWorkers, arg.SendBlockID, arg.WorkerID)
	return err
}

const sendBlocks = `-- name: SendBlocks :one
INSERT INTO send_blocks
    (date, count_blocks, address, load_price)
VALUES 
    ($1, $2, $3, $4)
RETURNING id
`

type SendBlocksParams struct {
	Date        time.Time
	CountBlocks int32
	Address     string
	LoadPrice   int32
}

func (q *Queries) SendBlocks(ctx context.Context, arg SendBlocksParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, sendBlocks,
		arg.Date,
		arg.CountBlocks,
		arg.Address,
		arg.LoadPrice,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
