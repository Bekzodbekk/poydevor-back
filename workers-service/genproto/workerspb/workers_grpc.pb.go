// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/workers.proto

package workerspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkersService_AddWorkers_FullMethodName                    = "/WorkersService/AddWorkers"
	WorkersService_GetWorkers_FullMethodName                    = "/WorkersService/GetWorkers"
	WorkersService_EndDay_FullMethodName                        = "/WorkersService/EndDay"
	WorkersService_LoadBlocks_FullMethodName                    = "/WorkersService/LoadBlocks"
	WorkersService_MonthlyReport_FullMethodName                 = "/WorkersService/MonthlyReport"
	WorkersService_AddPaidMonthly_FullMethodName                = "/WorkersService/AddPaidMonthly"
	WorkersService_UpdateWorker_FullMethodName                  = "/WorkersService/UpdateWorker"
	WorkersService_DeleteWorker_FullMethodName                  = "/WorkersService/DeleteWorker"
	WorkersService_GetDailyProductionWorkersById_FullMethodName = "/WorkersService/GetDailyProductionWorkersById"
	WorkersService_GetLoadProductionWorkersById_FullMethodName  = "/WorkersService/GetLoadProductionWorkersById"
)

// WorkersServiceClient is the client API for WorkersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkersServiceClient interface {
	AddWorkers(ctx context.Context, in *AddWorkersReq, opts ...grpc.CallOption) (*AddWorkersResp, error)
	GetWorkers(ctx context.Context, in *GetWorkersReq, opts ...grpc.CallOption) (*GetWorkersResp, error)
	EndDay(ctx context.Context, in *EndDayReq, opts ...grpc.CallOption) (*EndDayResp, error)
	LoadBlocks(ctx context.Context, in *LoadBlocksReq, opts ...grpc.CallOption) (*LoadBlocksResp, error)
	MonthlyReport(ctx context.Context, in *MonthlyReportReq, opts ...grpc.CallOption) (*MonthlyReportResp, error)
	AddPaidMonthly(ctx context.Context, in *PaidWorkerMonthlyReq, opts ...grpc.CallOption) (*PaidWorkerMonthlyResp, error)
	UpdateWorker(ctx context.Context, in *UpdateWorkerReq, opts ...grpc.CallOption) (*UpdateWorkerResp, error)
	DeleteWorker(ctx context.Context, in *DeleteWorkerReq, opts ...grpc.CallOption) (*DeleteWorkerResp, error)
	GetDailyProductionWorkersById(ctx context.Context, in *GetDailyProductionWorkersByIdReq, opts ...grpc.CallOption) (*GetDailyProductionWorkersByIdResp, error)
	GetLoadProductionWorkersById(ctx context.Context, in *GetLoadProductionWorkersByIdReq, opts ...grpc.CallOption) (*GetLoadProductionWorkersByIdResp, error)
}

type workersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkersServiceClient(cc grpc.ClientConnInterface) WorkersServiceClient {
	return &workersServiceClient{cc}
}

func (c *workersServiceClient) AddWorkers(ctx context.Context, in *AddWorkersReq, opts ...grpc.CallOption) (*AddWorkersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWorkersResp)
	err := c.cc.Invoke(ctx, WorkersService_AddWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) GetWorkers(ctx context.Context, in *GetWorkersReq, opts ...grpc.CallOption) (*GetWorkersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkersResp)
	err := c.cc.Invoke(ctx, WorkersService_GetWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) EndDay(ctx context.Context, in *EndDayReq, opts ...grpc.CallOption) (*EndDayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndDayResp)
	err := c.cc.Invoke(ctx, WorkersService_EndDay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) LoadBlocks(ctx context.Context, in *LoadBlocksReq, opts ...grpc.CallOption) (*LoadBlocksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadBlocksResp)
	err := c.cc.Invoke(ctx, WorkersService_LoadBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) MonthlyReport(ctx context.Context, in *MonthlyReportReq, opts ...grpc.CallOption) (*MonthlyReportResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlyReportResp)
	err := c.cc.Invoke(ctx, WorkersService_MonthlyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) AddPaidMonthly(ctx context.Context, in *PaidWorkerMonthlyReq, opts ...grpc.CallOption) (*PaidWorkerMonthlyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaidWorkerMonthlyResp)
	err := c.cc.Invoke(ctx, WorkersService_AddPaidMonthly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) UpdateWorker(ctx context.Context, in *UpdateWorkerReq, opts ...grpc.CallOption) (*UpdateWorkerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkerResp)
	err := c.cc.Invoke(ctx, WorkersService_UpdateWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) DeleteWorker(ctx context.Context, in *DeleteWorkerReq, opts ...grpc.CallOption) (*DeleteWorkerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkerResp)
	err := c.cc.Invoke(ctx, WorkersService_DeleteWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) GetDailyProductionWorkersById(ctx context.Context, in *GetDailyProductionWorkersByIdReq, opts ...grpc.CallOption) (*GetDailyProductionWorkersByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyProductionWorkersByIdResp)
	err := c.cc.Invoke(ctx, WorkersService_GetDailyProductionWorkersById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersServiceClient) GetLoadProductionWorkersById(ctx context.Context, in *GetLoadProductionWorkersByIdReq, opts ...grpc.CallOption) (*GetLoadProductionWorkersByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoadProductionWorkersByIdResp)
	err := c.cc.Invoke(ctx, WorkersService_GetLoadProductionWorkersById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkersServiceServer is the server API for WorkersService service.
// All implementations must embed UnimplementedWorkersServiceServer
// for forward compatibility.
type WorkersServiceServer interface {
	AddWorkers(context.Context, *AddWorkersReq) (*AddWorkersResp, error)
	GetWorkers(context.Context, *GetWorkersReq) (*GetWorkersResp, error)
	EndDay(context.Context, *EndDayReq) (*EndDayResp, error)
	LoadBlocks(context.Context, *LoadBlocksReq) (*LoadBlocksResp, error)
	MonthlyReport(context.Context, *MonthlyReportReq) (*MonthlyReportResp, error)
	AddPaidMonthly(context.Context, *PaidWorkerMonthlyReq) (*PaidWorkerMonthlyResp, error)
	UpdateWorker(context.Context, *UpdateWorkerReq) (*UpdateWorkerResp, error)
	DeleteWorker(context.Context, *DeleteWorkerReq) (*DeleteWorkerResp, error)
	GetDailyProductionWorkersById(context.Context, *GetDailyProductionWorkersByIdReq) (*GetDailyProductionWorkersByIdResp, error)
	GetLoadProductionWorkersById(context.Context, *GetLoadProductionWorkersByIdReq) (*GetLoadProductionWorkersByIdResp, error)
	mustEmbedUnimplementedWorkersServiceServer()
}

// UnimplementedWorkersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkersServiceServer struct{}

func (UnimplementedWorkersServiceServer) AddWorkers(context.Context, *AddWorkersReq) (*AddWorkersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkers not implemented")
}
func (UnimplementedWorkersServiceServer) GetWorkers(context.Context, *GetWorkersReq) (*GetWorkersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkers not implemented")
}
func (UnimplementedWorkersServiceServer) EndDay(context.Context, *EndDayReq) (*EndDayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndDay not implemented")
}
func (UnimplementedWorkersServiceServer) LoadBlocks(context.Context, *LoadBlocksReq) (*LoadBlocksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBlocks not implemented")
}
func (UnimplementedWorkersServiceServer) MonthlyReport(context.Context, *MonthlyReportReq) (*MonthlyReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonthlyReport not implemented")
}
func (UnimplementedWorkersServiceServer) AddPaidMonthly(context.Context, *PaidWorkerMonthlyReq) (*PaidWorkerMonthlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaidMonthly not implemented")
}
func (UnimplementedWorkersServiceServer) UpdateWorker(context.Context, *UpdateWorkerReq) (*UpdateWorkerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorker not implemented")
}
func (UnimplementedWorkersServiceServer) DeleteWorker(context.Context, *DeleteWorkerReq) (*DeleteWorkerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (UnimplementedWorkersServiceServer) GetDailyProductionWorkersById(context.Context, *GetDailyProductionWorkersByIdReq) (*GetDailyProductionWorkersByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyProductionWorkersById not implemented")
}
func (UnimplementedWorkersServiceServer) GetLoadProductionWorkersById(context.Context, *GetLoadProductionWorkersByIdReq) (*GetLoadProductionWorkersByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadProductionWorkersById not implemented")
}
func (UnimplementedWorkersServiceServer) mustEmbedUnimplementedWorkersServiceServer() {}
func (UnimplementedWorkersServiceServer) testEmbeddedByValue()                        {}

// UnsafeWorkersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkersServiceServer will
// result in compilation errors.
type UnsafeWorkersServiceServer interface {
	mustEmbedUnimplementedWorkersServiceServer()
}

func RegisterWorkersServiceServer(s grpc.ServiceRegistrar, srv WorkersServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkersService_ServiceDesc, srv)
}

func _WorkersService_AddWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).AddWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_AddWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).AddWorkers(ctx, req.(*AddWorkersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_GetWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).GetWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_GetWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).GetWorkers(ctx, req.(*GetWorkersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_EndDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).EndDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_EndDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).EndDay(ctx, req.(*EndDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_LoadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBlocksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).LoadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_LoadBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).LoadBlocks(ctx, req.(*LoadBlocksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_MonthlyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthlyReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).MonthlyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_MonthlyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).MonthlyReport(ctx, req.(*MonthlyReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_AddPaidMonthly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaidWorkerMonthlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).AddPaidMonthly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_AddPaidMonthly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).AddPaidMonthly(ctx, req.(*PaidWorkerMonthlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_UpdateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).UpdateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_UpdateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).UpdateWorker(ctx, req.(*UpdateWorkerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_DeleteWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).DeleteWorker(ctx, req.(*DeleteWorkerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_GetDailyProductionWorkersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyProductionWorkersByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).GetDailyProductionWorkersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_GetDailyProductionWorkersById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).GetDailyProductionWorkersById(ctx, req.(*GetDailyProductionWorkersByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkersService_GetLoadProductionWorkersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadProductionWorkersByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkersServiceServer).GetLoadProductionWorkersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkersService_GetLoadProductionWorkersById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkersServiceServer).GetLoadProductionWorkersById(ctx, req.(*GetLoadProductionWorkersByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkersService_ServiceDesc is the grpc.ServiceDesc for WorkersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkersService",
	HandlerType: (*WorkersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWorkers",
			Handler:    _WorkersService_AddWorkers_Handler,
		},
		{
			MethodName: "GetWorkers",
			Handler:    _WorkersService_GetWorkers_Handler,
		},
		{
			MethodName: "EndDay",
			Handler:    _WorkersService_EndDay_Handler,
		},
		{
			MethodName: "LoadBlocks",
			Handler:    _WorkersService_LoadBlocks_Handler,
		},
		{
			MethodName: "MonthlyReport",
			Handler:    _WorkersService_MonthlyReport_Handler,
		},
		{
			MethodName: "AddPaidMonthly",
			Handler:    _WorkersService_AddPaidMonthly_Handler,
		},
		{
			MethodName: "UpdateWorker",
			Handler:    _WorkersService_UpdateWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _WorkersService_DeleteWorker_Handler,
		},
		{
			MethodName: "GetDailyProductionWorkersById",
			Handler:    _WorkersService_GetDailyProductionWorkersById_Handler,
		},
		{
			MethodName: "GetLoadProductionWorkersById",
			Handler:    _WorkersService_GetLoadProductionWorkersById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/workers.proto",
}
